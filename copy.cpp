// BATTLE FIELD

#include <iostream>
#include <fstream>
#include <windows.h>
#include <cmath>
using namespace std;

char box = 219;                                                            // Initialization of shapes                                                              
char gun = 214;
char line = 215;
char cap = 234;
char leg=172;
char arrow=17;
char Arrow=16;
char smile=2;
char leaf=5;
char dia=4; 


char solider[4][4] = {  {' ', smile, ' ', ' '},                          // Player Character(Solider)
                        {' ', box, Arrow, Arrow},
                        {' ', box, ' ', ' '},
                        {' ', leg, leg, ' '}
                     };    

                                                                          
char gunChamp[3][4] = {  {' ', dia, ' ', dia},                          // Enemy Character1(Gun Champ) 
                         {' ', box, box, box},
                         {' ', '&', ' ', '&'}
                      }; 


char terrorist[3][4] = {  {' ',leaf,leaf,' '},                        // Enemy Character2(Terrorist)
                          {arrow, box, box, ' '},
                          {' ', gun, gun, ' '}
                       };


char shooter[3][4] = {  {arrow, arrow, box, box},                       // Enemy Character3(Shooter)
                        {' ', ' ', box, box},
                        {' ', ' ', line, line},
                     };  

char field[39][143] = {
  {},
  {},                                                       
  {},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','$',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ','$',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','$',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ','$',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','$',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ',' ','o',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ','$',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ','%','%'},
  {'%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ','o',' ','o',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','$',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ',' ',' ','o',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ','o',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ',' ','o',' ','o',' ','o',' ',' ',' ',' ',' ',' ',' ','o',' ','o',' ','o',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ','o','o','o','o','o','o','o',' ',' ',' ',' ',' ','o','o','o','o','o','o','o',' ','%','%'},
  {},
  {},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%','%','%','%','%','%','%','%','%','|',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'}, 
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|','%','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%','%','%','%','%','%','%','%','%','%','%','%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ','o',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ','$',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','|','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','%','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','%','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','%','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%'},
  {'%','%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','o','%','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%'},
  {}
};


int soliderX = 6;                                                      // Solider Coordinates
int soliderY = 6;
                                                                        
int champX = 25;                                                       // Gun champ Coordinates
int champY = 25;

int teroX = 120;                                                       // Terrorist Coordinates
int teroY = 14;

int shooterX = 50;                                                     // Shooter Coordinates
int shooterY = 20;

                                                         
int bulletX[100];                                                      // Solider Bullets
int bulletY[100];
bool isBulletActive[100];
int bulletCount = 0;

int teroBulletX[100000];                                               // Terrorist Bullets
int teroBulletY[100000];
bool isTeroBulletActive[100000];
int teroBulletCount = 0;

int shooterBulletX[1000000];                                           // Shooter Bullets
int shooterBulletY[100000];
bool isShooterBulletActive[100000];
int shooterBulletCount = 0;

int champBulletX[1000000];                                             // Champ Bullets
int champBulletY[100000];
bool isChampBulletActive[100000];
int champBulletCount = 0;

int score = 0;                                                         // Score and Life Counts
int lifeCount = 10;
int teroLifeCount = 3;
int shooterLifeCount = 3;
int champLifeCount = 3;


// Functions

void gotoxy(int x, int y);
char getCharAtxy(short int x, short int y);

// Prints

void printSolider();                       // Print Solider
void printField();                         // Print Field 
void printChamp();                         // Print Gun Champ
void printTerrorist();                     // Print Terrorist
void printShooter();                       // Print Shooter

// Movements
 
void moveSoliderDown();                    // Move Solider Down                      
void moveSoliderUp();                      // Move Solider Up
void moveSoliderLeft();                    // Move Solider Left
void moveSoliderRight();                   // Move Solider Right
void moveChamp();                          // Move Gun Champ
void moveChampDown();                      // Move Champ Down
void moveChampUp();                        // Move Champ Up
void moveChampLeft();                      // Move Champ Left
void moveChampRight();                     // Move Champ Right
void moveTerrorist();                      // Move Terrorist
void moveTerroristLeft(string &enemyDirection);                  // Move Tero Left
void moveTerroristRight(string &enemyDirection);                 // Move Tero Right
void moveShooter();                        // Move Shooter 
void moveShooterUp(string &shooterDirection);                      // Move Shooter Up
void moveShooterDown(string &shooterDirection);                    // Move Shooter Down

// Erase

void eraseSolider();                       // Erase Solider
void eraseChamp();                         // Erase Gun Champ
void eraseTerrorist();                     // Erase Terrorist
void eraseShooter();                       // Erase Shooter


void moveBullet();                         // Solider Bullets
void generateBullet();
void printBullet(int x, int y);
void eraseBullet(int x, int y);
void makeBulletInactive(int idx);

void makeTeroBulletInactive(int idx);      // Terrorist Bullets
void moveTeroBullet();
void generateTeroBullet();
void printTeroBullet(int x, int y);
void eraseTeroBullet(int x, int y);

void makeShooterBulletInactive(int idx);         // Shooter Bullets
void moveShooterBullet();
void generateShooterBullet();
void printShooterBullet(int x, int y);
void eraseShooterBullet(int x, int y);
 

void playerCollisionWithTero();                 //Collisions
void playerCollisionWithChamp();
void playerCollisionWithShooter();
void bulletTeroCollisionWithSolider();       
void bulletShooterCollisionWithSolider();
void bulletSoliderCollisionWithChamp();
void bulletSoliderCollisionWithTero();
void bulletSoliderCollisionWithShooter();

void decLifeCount();                           // Points
void decLifeCount1();
void decLifeCount2();
void decLifeCount3();
void printLifeCount();
void printTeroLifeCount();
void printShooterLifeCount();
void printChampLifeCount();
void printScore();
void addScore();

void scoreSoliderDown();                    //Solider Score
void scoreSoliderUp();
void scoreSoliderLeft();
void scoreSoliderRight();

void countSoliderDown();                   //Solider LifeCount
void countSoliderUp();
void countSoliderLeft();
void countSoliderRight();

int option;                               //Game menu
void printGameMenu();
void printBattleField();                     
int choice();
void gameOver();

void storeSoliderInFile();                // File Handling
void readSoliderFromFile();               
void storeFieldInFile();
void readFieldFromFile();
void storeChampInFile();
void readChampFromFile();
void storeShooterInFile();
void readShooterFromFile();
void storeTeroInFile();
void readTeroFromFile();



main()

   {
      string shooterDirection = "Down";                                      // Shooter Controller
      string enemyDirection = "Right";                                       // Terriorist Controller
      while (option!=3)
      {
         printBattleField();
         printGameMenu();
         
         if (option==1)
         {
             system("cls");
             cout << "blan blan";
         }
         else if (option==2)
         {
            bool gamerunning = true;
            system("cls");
            int timer = 0;
            printField();
            printSolider();
            // readSoliderFromFile();
            // readFieldFromFile();
            // readChampFromFile();
            // readShooterFromFile();
            // readTeroFromFile();

            while (gamerunning)
            {
               countSoliderRight();
               countSoliderDown();
               countSoliderLeft();
               countSoliderUp();
               printScore();
               printLifeCount();
               printTeroLifeCount();
               printShooterLifeCount();
               printChampLifeCount();
               if(champLifeCount > 0)
               {
                  printChamp();
               }
               else if (champLifeCount == 0 )
               {
                  eraseChamp();
               }
               if(teroLifeCount > 0)
               {
                  printTerrorist();
               }
               else if (teroLifeCount == 0 )
               {
               eraseTerrorist();
               }
               if(shooterLifeCount > 0)
               {
                  printShooter();
               }
               else if (shooterLifeCount == 0 )
               {
               eraseShooter();
               }
               if (GetAsyncKeyState(VK_RIGHT))
               {
                  moveSoliderRight();
               }

               if (GetAsyncKeyState(VK_LEFT))
               {
                  moveSoliderLeft();
               }

               if (GetAsyncKeyState(VK_UP))
               {
                  moveSoliderUp();
               }

               if (GetAsyncKeyState(VK_DOWN))
               {
                  moveSoliderDown();
               }
               if (GetAsyncKeyState(VK_SPACE))
               {
                  generateBullet();
               }
               if (GetAsyncKeyState(VK_BACK))
               {
                  system("cls");
                  break;
               }
               if (lifeCount==0)
               {
                  system("cls");
                  gameOver();
                  printScore();
                  break; 
               }
               if (timer == 3)
               {
                  timer = 0;
                  if(teroLifeCount > 0)
                  {
                     moveTerrorist();
                  }
                  if(champLifeCount > 0)
                  {
                     moveChamp();
                  }
                  if(shooterLifeCount > 0)
                  {
                     moveShooter();
                  }
         
               }
               

               moveBullet();
               bulletTeroCollisionWithSolider();
               bulletShooterCollisionWithSolider();
               playerCollisionWithTero();
               playerCollisionWithShooter();
               playerCollisionWithChamp();
               if(teroLifeCount > 0)
               {
                  bulletSoliderCollisionWithTero();
               }
               if(shooterLifeCount > 0)
               {
                  bulletSoliderCollisionWithShooter();
               }
               if(shooterLifeCount > 0)
               {
                  bulletSoliderCollisionWithChamp();
               }
               
               timer++;
               Sleep(30);
            }
         }
      }
         

         
   }

// DEFINITION OF FUNCTIONS

void gotoxy(int x, int y)
{
   COORD coordinates;
   coordinates.X = x;
   coordinates.Y = y;
   SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coordinates);
}

char getCharAtxy(short int x, short int y)
{
   CHAR_INFO ci;
   COORD xy = {0, 0};
   SMALL_RECT rect = {x, y, x, y};
   COORD coordBufSize;
   coordBufSize.X = 1;
   coordBufSize.Y = 1;
   return ReadConsoleOutput(GetStdHandle(STD_OUTPUT_HANDLE), &ci, coordBufSize, xy, &rect) ? ci.Char.AsciiChar : ' ';
}

//Print Battle Field

void printBattleField()
{
cout << "     _|    _|      _|_|_|      _|_|    _|_|_|_|_|  _|_|_|_|_|  _|        _|_|_|_|      _|_|_|_|  _|_|_|  _|_|_|_|  _|        _|_|_|    _|      _|      " << endl;     
cout << "   _|    _|        _|    _|  _|    _|      _|          _|      _|        _|            _|          _|    _|        _|        _|    _|    _|      _|    " << endl;  
cout << " _|    _|          _|_|_|    _|_|_|_|      _|          _|      _|        _|_|_|        _|_|_|      _|    _|_|_|    _|        _|    _|      _|      _|  " << endl;
cout << "   _|    _|        _|    _|  _|    _|      _|          _|      _|        _|            _|          _|    _|        _|        _|    _|    _|      _|    " << endl; 
cout << "     _|    _|      _|_|_|    _|    _|      _|          _|      _|_|_|_|  _|_|_|_|      _|        _|_|_|  _|_|_|_|  _|_|_|_|  _|_|_|    _|     _|       " << endl;
cout << endl;
cout << endl; 
cout << "*******************************************************************************************************************************************************" << endl;
}

//Print Game Over

void gameOver()
{
    cout << "  _____                 ____                    " << endl;             
    cout << " / ___/__ ___ _  ___   / __\\_  _____ ____      " << endl;
    cout << "/ (_ / _ `/  '\\/ -_) / /_/ / |/ / -_) __/      " << endl;
    cout << "\\___/\\_,_/_/_/_/\\__/  \\____/|___/\\__/_/    " << endl;
}

// Print Game Menu

void printGameMenu()
{
   cout << "1. READ INSTRUCTIONS" << endl;
   cout << "2. START GAME       " << endl;
   cout << "3. EXIT             " << endl;
   cout << endl;
   cout << "ENTER OPTION       " << endl;
   option=choice();
}
int choice()
{
   cin >> option;
   return option;
}

// Print Field

void printField()
{
   for(int i=0;i<sizeof(field)/sizeof(field[0]);i++)
    {
      for (int j = 0; j < sizeof(field[0])/sizeof(field[0][0]); j++)
      {
         cout << field[i][j];
      }
      cout << endl;
    }
   //  storeFieldInFile();
}

// Print Solider

void printSolider()
{
   
   for (int i = 0; i < sizeof(solider)/sizeof(solider[0]); i++)
   {
        gotoxy(soliderX, soliderY+i);

        for(int j = 0; j < sizeof(solider[0])/sizeof(solider[0][0]); j++ )
        {
            cout << solider[i][j];
        }
        cout << endl;

   }
   //  storeSoliderInFile();   
}

// Erase Solider

void eraseSolider()
{
   
    for (int i = 0; i < sizeof(solider)/sizeof(solider[0]) ; i++)
   {
        gotoxy(soliderX, soliderY + i);

        for(int j = 0; j < sizeof(solider[0])/sizeof(solider[0][0]); j++ )
        {
            cout << " ";
        }

        cout << endl;
   }     
   
}
// Erase GunChamp

void eraseChamp()
{
   
   for (int i = 0; i < sizeof(gunChamp)/sizeof(gunChamp[0]); i++)
   {
        gotoxy(champX , champY + i);

        for(int j = 0; j < sizeof(gunChamp[0])/sizeof(gunChamp[0][0]) ; j++ )
        {
            cout << " ";
        }

        cout << endl;
   }     
}

// Erase Terrorist

void eraseTerrorist()
{
   
   for (int i = 0; i < sizeof(terrorist)/sizeof(terrorist[0]); i++)
   {
        gotoxy(teroX, teroY + i);

        for(int j = 0; j < sizeof(terrorist[0])/sizeof(terrorist[0][0]); j++ )
        {
            cout << " ";
        }

        cout << endl;
   }     
}

// Erase Shooter

void eraseShooter()
{
   
   for (int i = 0; i < sizeof(shooter)/sizeof(shooter[0]); i++)
   {
        gotoxy(shooterX, shooterY + i);

        for(int j = 0; j < sizeof(shooter[0])/sizeof(shooter[0][0]); j++ )
        {
            cout << " ";
        }

        cout << endl;
   }     
}

// Print GunChamp

void printChamp()
{
   
   for (int i = 0; i < sizeof(gunChamp)/sizeof(gunChamp[0]) ; i++)
   {
        gotoxy(champX, champY+i);
        for(int j = 0; j < sizeof(gunChamp[0])/sizeof(gunChamp[0][0]) ; j++ )
        {
            cout << gunChamp[i][j];
        }

        cout << endl;
   } 
   // storeChampInFile();    
}

// Print Terrrorist

void printTerrorist()
{

   for (int i = 0; i < sizeof(terrorist)/sizeof(terrorist[0]); i++)
   {
        gotoxy(teroX, teroY+i);
        for(int j = 0; j < sizeof(terrorist[0])/sizeof(terrorist[0][0]); j++ )
        {
            cout << terrorist[i][j];
        }

        cout << endl;
   }
   // storeTeroInFile();     
}

// Print Shooter

void printShooter()
{
   
   for (int i = 0; i < sizeof(shooter)/sizeof(shooter[0]); i++)
   {
        gotoxy(shooterX, shooterY+i);
        for(int j = 0; j < sizeof(shooter[0])/sizeof(shooter[0][0]); j++ )
        {
            cout << shooter[i][j];
        }

        cout << endl;
   } 
   // storeShooterInFile();    
}

// Score Addition

void addScore()
{
   score++;
}

// Print Score

void printScore()
{
   gotoxy(148, 4);
   cout << "Score: " << score;
}

// Life Count DEcrease (Solider)

void decLifeCount()
{
   lifeCount--;
}

// Life Count DEcrease (Enemies)

void decLifeCount1()
{
   champLifeCount--;
}

void decLifeCount2()
{
   teroLifeCount--;
}

void decLifeCount3()
{
   shooterLifeCount--;
}


void printLifeCount()                                                               // Print LifeCount of Solider
{
   gotoxy(159, 6);
   cout << " ";
   gotoxy(160, 6);
   cout << " ";
   gotoxy(148, 6);
   cout << "LifeCount:" << lifeCount;
}

void printTeroLifeCount()                                                           // Print LifeCount of Enemies
{
   gotoxy(148, 8);
   cout << "TeroLifeCount: " << teroLifeCount;
}

void printShooterLifeCount()
{
   gotoxy(148, 10);
   cout << "ShooterLifeCount:" << shooterLifeCount;
}

void printChampLifeCount()
{
   gotoxy(148, 12);
   cout << "ChampLifeCount: " << champLifeCount;
}

void moveSoliderRight()                                                              // Solider Movement
{
   for (int y = 0; y < sizeof(solider)/sizeof(solider[0]); y++)
   {
      char next = getCharAtxy(soliderX + sizeof(solider[0])/sizeof(solider[0][0]), soliderY + y);
      if (next != ' ' && next != '$' && next != 'o' && next != '-' && next != '`')
      {
         return;
      }
   }
   eraseSolider();
   soliderX = soliderX + 1;
   printSolider();
   scoreSoliderRight();

}
void moveSoliderLeft()
{
   for (int y = 0; y < sizeof(solider)/sizeof(solider[0]); y++)
   {
      char next = getCharAtxy(soliderX - 1, soliderY + y);
      if (next != ' ' && next != '$' && next != 'o' && next != '-' && next != '`')
      {
         return;
      }
   }
   eraseSolider();
   soliderX = soliderX - 1;
   printSolider();
   scoreSoliderLeft();
}
void moveSoliderUp()
{
   for (int x = 0; x < sizeof(solider[0])/sizeof(solider[0][0]) ; x++)
   {
      char next = getCharAtxy(soliderX + x, soliderY - 1);
      if (next != ' ' && next != '$' && next != 'o' && next != '-' && next != '`')
      {
         return;
      }
   }

   eraseSolider();
   soliderY = soliderY - 1;
   printSolider();
   scoreSoliderUp();

}
void moveSoliderDown()
{
   for (int x = 0; x < sizeof(solider[0])/sizeof(solider[0][0]) ; x++)
   {
      char next = getCharAtxy(soliderX + x, soliderY + sizeof(solider)/sizeof(solider[0]));
      if (next != ' ' && next != '$' && next != 'o' && next != '-' && next != '`')
      {
         return;
      }
   }
   eraseSolider();
   soliderY = soliderY + 1;
   printSolider();
   scoreSoliderDown();

}

// Solider Firing

void printBullet(int x, int y)
{
   gotoxy(x, y);
   cout << ".";
}
void eraseBullet(int x, int y)
{
   gotoxy(x, y);
   cout << " ";
}

void generateBullet()
{
   bulletX[bulletCount] = soliderX + 4;
   bulletY[bulletCount] = soliderY;
   isBulletActive[bulletCount] = true;
   gotoxy(soliderX + 4, soliderY);
   cout << ".";
   bulletCount++;
}

// Inactive Bullet
void makeBulletInactive(int idx)
{
   isBulletActive[idx] = false;
}

// Solider Bullet Movement
void moveBullet()
{
   for (int x = 0; x < bulletCount; x++)
   {
      if (isBulletActive[x] == true)
      {
         char next = getCharAtxy(bulletX[x] + 1, bulletY[x]);
         if (next != ' ')
         {
            eraseBullet(bulletX[x], bulletY[x]);
            makeBulletInactive(x);
         }
         else
         {
            eraseBullet(bulletX[x], bulletY[x]);
            bulletX[x] = bulletX[x] + 1;
            printBullet(bulletX[x], bulletY[x]);
         }
      }
   }
}

// Enemy Movement

// Shooter Movement

void moveShooterUp(string &shooterDirection)
{
   if (shooterDirection == "Up")
   {
      char next = getCharAtxy(shooterX, shooterY - 1);
      if (next == ' ' || next == 'o')
      {
         eraseShooter();
         shooterY--;
         printShooter();
      }
      if (next == '%' || next == '|' || next == '$')
      {
         shooterDirection = "Down";
      }
   }
}   
void moveShooterDown(string &shooterDirection)
{
   if (shooterDirection == "Down")
   {
      char next = getCharAtxy(shooterX, shooterY + 3);
      if (next == ' ' || next == 'o')
      {
         eraseShooter();
         shooterY++;
         printShooter();
      }
      if (next == '%' || next == '|' || next == '$')
      {
         shooterDirection = "Up";
      }
   }
}
void moveShooter(string &shooterDirection)
{
    moveShooterUp(shooterDirection);
    moveShooterDown(shooterDirection);
    generateShooterBullet();
    moveShooterBullet();
    Sleep(10);
}

// Terrorist Movement

void moveTerroristLeft(string &enemyDirection)
{
      if (enemyDirection == "Left")
      {
         char next = getCharAtxy(teroX - 1, teroY);
         if (next == ' ')
         {
            eraseTerrorist();
            teroX--;
            printTerrorist();
         }
         if (next == '%' || next == 'o' || next == '$')
         {
            enemyDirection = "Right";
         }
      }
}

void moveTerroristRight(string &enemyDirection)
{ 
      if (enemyDirection == "Right")
      {
         char next = getCharAtxy(teroX + 4, teroY);
         if (next == ' ')
         {
            eraseTerrorist();
            teroX++;
            printTerrorist();
         }
         else if (next == '%' || next == 'o' || next == '-' || next == '$')
         {
            enemyDirection = "Left";
         }
      }
}
void moveTerrorist(string &enemyDirection)
{
    moveTerroristLeft(enemyDirection);
    moveTerroristRight(enemyDirection);
    generateTeroBullet();
    moveTeroBullet();
    Sleep(10);
}

void moveChamp()
{
   int diffX=champX-soliderX;
   int diffY=champY-soliderY;
   if(diffX>0)
    {
      moveChampLeft();
    }
    if(diffX<0)
    {
      moveChampRight();
    }
    if(diffY>0)
    {
      moveChampUp();
    }
    if(diffY<0)
    {
      moveChampDown();
    }

}

void moveChampRight()
{
   for (int y = 0; y < sizeof(gunChamp)/sizeof(gunChamp[0]); y++)
   {
      char next = getCharAtxy(champX + sizeof(gunChamp[0])/sizeof(gunChamp[0][0]), champY + y);
      if (next != ' ' && next != '$' && next != 'o' && next != '-' && next != '`')
      {
         return;
      }
   }
   eraseChamp();
   champX = champX + 1;
   printChamp();
   
}
void moveChampLeft()
{
   for (int y = 0; y < sizeof(gunChamp)/sizeof(gunChamp[0]); y++)
   {
      char next = getCharAtxy(champX - 1, champY + y);
      if (next != ' ' && next != '$' && next != 'o' && next != '-' && next != '`')
      {
         return;
      }
   }
   eraseChamp();
   champX = champX - 1;
   printChamp();

}
void moveChampUp()
{
   for (int x = 0; x < sizeof(gunChamp[0])/sizeof(gunChamp[0][0]); x++)
   {
      char next = getCharAtxy(champX + x, champY - 1);
      if (next != ' ' && next != '$' && next != 'o' && next != '-' && next != '`')
      {
         return;
      }
   }

   eraseChamp();
   champY = champY - 1;
   printChamp();

}
void moveChampDown()
{
   for (int x = 0; x < sizeof(gunChamp[0])/sizeof(gunChamp[0][0]); x++)
   {
      char next = getCharAtxy(champX + x, champY + sizeof(gunChamp)/sizeof(gunChamp[0]));
      if (next != ' ' && next != '$' && next != 'o' && next != '-' && next != '`')
      {
         return;
      }
   }
   eraseChamp();
   champY = champY + 1;
   printChamp();

}

   // Enemies Firing

   // Terrorist Firing
   void printTeroBullet(int x, int y)
   {
      gotoxy(x, y);
      cout << "-";
   }
   void eraseTeroBullet(int x, int y)
   {
      gotoxy(x, y);
      cout << " ";
   }

   void generateTeroBullet()
   {
      teroBulletX[teroBulletCount] = teroX;
      teroBulletY[teroBulletCount] = teroY - 1;
      isTeroBulletActive[teroBulletCount] = true;
      gotoxy(teroX, teroY - 1);
      cout << "-";
      teroBulletCount++;
   }

   void makeTeroBulletInactive(int idx)
   {
      isTeroBulletActive[idx] = false;
   }

   void moveTeroBullet()
   {
      for (int x = 0; x < teroBulletCount; x++)
      {
         if (isTeroBulletActive[x] == true)
         {
            char next = getCharAtxy(teroBulletX[x], teroBulletY[x] - 1);
            if (next != ' ')
            {
               eraseTeroBullet(teroBulletX[x], teroBulletY[x]);
               makeTeroBulletInactive(x);
            }
            else
            {
               eraseTeroBullet(teroBulletX[x], teroBulletY[x]);
               teroBulletY[x] = teroBulletY[x] - 1;
               printTeroBullet(teroBulletX[x], teroBulletY[x]);
            }
         }
      }
   }

   // Shooter Firing

   void printShooterBullet(int x, int y)
   {
      gotoxy(x, y);
      cout << "`";
   }
   void eraseShooterBullet(int x, int y)
   {
      gotoxy(x, y);
      cout << " ";
   }

   void generateShooterBullet()
   {
      shooterBulletX[shooterBulletCount] = shooterX - 1;
      shooterBulletY[shooterBulletCount] = shooterY;
      isShooterBulletActive[shooterBulletCount] = true;
      gotoxy(shooterX - 1, shooterY);
      cout << "`";
      shooterBulletCount++;
   }

   void makeShooterBulletInactive(int idx)
   {
      isShooterBulletActive[idx] = false;
   }
   void moveShooterBullet()
   {
      for (int x = 0; x < shooterBulletCount; x++)
      {
         if (isShooterBulletActive[x] == true)
         {
            char next = getCharAtxy(shooterBulletX[x] - 1, shooterBulletY[x]);
            if (next != ' ')
            {
               eraseShooterBullet(shooterBulletX[x], shooterBulletY[x]);
               makeShooterBulletInactive(x);
            }
            else
            {
               eraseShooterBullet(shooterBulletX[x], shooterBulletY[x]);
               shooterBulletX[x] = shooterBulletX[x] - 1;
               printShooterBullet(shooterBulletX[x], shooterBulletY[x]);
            }
         }
      }
   }


// Decrease in Solider Life

   void bulletTeroCollisionWithSolider()
   {
      for (int x = 0; x < teroBulletCount; x++)
      {
         if (isTeroBulletActive[x] == true)
         {
            if (teroBulletX[x] + 1 == soliderX && teroBulletY[x] == soliderY)
            {
               decLifeCount();
            }
            if (soliderX - 1 == teroBulletX[x] && soliderY + 1 == teroBulletY[x])
            {
               decLifeCount();
            }
         }
      }
   }
   void bulletShooterCollisionWithSolider()
   {
      for (int x = 0; x < shooterBulletCount; x++)
      {
         if (isShooterBulletActive[x] == true)
         {
            if (shooterBulletX[x] + 1 == soliderX && shooterBulletY[x] == soliderY)
            {
               decLifeCount();
            }
            if (soliderX - 1 == shooterBulletX[x] && soliderY + 1 == shooterBulletY[x])
            {
               decLifeCount();
            }
         }
      }
   }

   // Solider Score

void scoreSoliderRight()
{
   for (int y = 0; y < sizeof(solider)/sizeof(solider[0]); y++)
   {
      char next = getCharAtxy(soliderX + sizeof(solider[0])/sizeof(solider[0][0]), soliderY + y);
      if (next == 'o' )
      {
         addScore();
      }
   }
   
}
void scoreSoliderLeft()
{
   for (int y = 0; y < sizeof(solider)/sizeof(solider[0]); y++)
   {
      char next = getCharAtxy(soliderX - 1, soliderY + y);
      if (next == 'o')
      {
         addScore();
      }
   }
   
}
void scoreSoliderUp()
{
   for (int x = 0; x < sizeof(solider[0])/sizeof(solider[0][0]); x++)
   {
      char next = getCharAtxy(soliderX + x, soliderY - 1);
      if (next == 'o')
      {
         addScore();
      }
   }

}
void scoreSoliderDown()
{
   for (int x = 0; x < sizeof(solider[0])/sizeof(solider[0][0]); x++)
   {
      char next = getCharAtxy(soliderX + x, soliderY + sizeof(solider)/sizeof(solider[0]));
      if (next == 'o')
      {
         addScore();
      }
   }
   
}

  // Solider LifeCount

void countSoliderRight()
{
   for (int y = 0; y < sizeof(solider)/sizeof(solider[0]); y++)
   {
      char next = getCharAtxy(soliderX + sizeof(solider[0])/sizeof(solider[0][0]), soliderY + y);
      if (next == '$' )
      {
         if(lifeCount<10)
         {
           lifeCount++;
         }

      }
   }
   
}
void countSoliderLeft()
{
   for (int y = 0; y < sizeof(solider)/sizeof(solider[0]); y++)
   {
      char next = getCharAtxy(soliderX - 1, soliderY + y);
     if (next == '$' )
      {
         if(lifeCount<10)
         {
           lifeCount++;
         }

      }
   }
   
}
void countSoliderUp()
{
   for (int x = 0; x < sizeof(solider[0])/sizeof(solider[0][0]); x++)
   {
      char next = getCharAtxy(soliderX + x, soliderY - 1);
      if (next == '$' )
      {
         if(lifeCount<10)
         {
           lifeCount++;
         }

      }
   }

}
void countSoliderDown()
{
   for (int x = 0; x < sizeof(solider[0])/sizeof(solider[0][0]); x++)
   {
      char next = getCharAtxy(soliderX + x, soliderY + sizeof(solider)/sizeof(solider[0]));
      if (next == '$' )
      {
         if(lifeCount<10)
         {
           lifeCount++;
         }

      }
   }
   
}

// Decrease in Enemies Life

   void bulletSoliderCollisionWithTero()
   {
      for (int x = 0; x < bulletCount; x++)
      {
         if (isBulletActive[x] == true)
         {
            if (bulletX[x] + 1 == teroX && bulletY[x] == teroY)
            {
               decLifeCount2();
            }
            if (teroX - 1 == bulletX[x] && teroY + 1 == bulletY[x])
            {
               decLifeCount2();
            }
         }
      }
   }

   void bulletSoliderCollisionWithShooter()
   {
      for (int x = 0; x < bulletCount; x++)
      {
         if (isBulletActive[x] == true)
         {
            if (bulletX[x] + 1 == shooterX && bulletY[x] == shooterY)
            {
               decLifeCount3();
            }
            if (shooterX - 1 == bulletX[x] && shooterY + 1 == bulletY[x])
            {
               decLifeCount3();
            }
         }
      }
   }

   void bulletSoliderCollisionWithChamp()
   {
      for (int x = 0; x < bulletCount; x++)
      {
         if (isBulletActive[x] == true)
         {
            if (bulletX[x] + 1 == champX && bulletY[x] == champY)
            {
               decLifeCount1();
            }
            if (champX - 1 == bulletX[x] && champY + 1 == bulletY[x])
            {
               decLifeCount1();
            }
         }
      }
   }

void playerCollisionWithTero()
{
   if(abs(teroX-soliderX) >= 0 && abs(teroX-soliderX) <=4 )
   {
      if(abs(teroY-soliderY) >= 0 && abs(teroY-soliderY) <=4 )
      {
         decLifeCount();
      }

   }
   
}
void playerCollisionWithChamp()
{
   if(abs(champX-soliderX) >= 0 && abs(champX-soliderX) <=4 )
   {
      if(abs(champY-soliderY) >= 0 && abs(champY-soliderY) <=4 )
      {
         decLifeCount();
      }
      
   }
   
}
void playerCollisionWithShooter()
{
   if(abs(shooterX-soliderX) >= 0 && abs(shooterX-soliderX) <=4 )
   {
      if(abs(shooterY-soliderY) >= 0 && abs(shooterY-soliderY) <=4 )
      {
         decLifeCount();
      }
      
   }
   
}
//File Handling

// void storeSoliderInFile()
// {
//    fstream file;
//    file.open("Solider.txt", ios::out);
//    for(int i=0;i<4;i++)
//    {
//      for(int j=0;j<4;j++)
//       {
//          file << solider[i][j];
//       }
//       file << endl;
//    }
   
// }

// void readSoliderFromFile()
// {
//    fstream file;
//    string line;
//    file.open("Solider.txt", ios::in);

//       for(int i=0;i<4;i++)
//       {
//         getline(file,line);
//         for(int j=0;j<4;j++)
//         {
//           solider[i][j] = line[j];
//           break;
//         }
//         file << endl;
//       }
      

//    file.close();
// }

// void storeChampInFile()
// {
//    fstream file;
//    file.open("GunChamp.txt", ios::out);
//    for(int i=0;i<3;i++)
//    {
//      for(int j=0;j<4;j++)
//       {
//          file << gunChamp[i][j];
//       }
//       file << endl;
//    }
   
// }

// void readChampFromFile()
// {
//    fstream file;
//    string line;
//    file.open("GunChamp.txt", ios::in);

//       for(int i=0;i<3;i++)
//       {
//         getline(file,line);
//         for(int j=0;j<4;j++)
//         {
//           gunChamp[i][j] = line[j];
//           break;
//         }
//         file << endl;
//       }
      

//    file.close();
// }

// void storeTeroInFile()
// {
//    fstream file;
//    file.open("Tero.txt", ios::out);
//    for(int i=0;i<3;i++)
//    {
//      for(int j=0;j<4;j++)
//       {
//          file << terrorist[i][j];
//       }
//       file << endl;
//    }
   
// }

//  void readTeroFromFile()
// {
//    fstream file;
//    string line;
//    file.open("Tero.txt", ios::in);

//       for(int i=0;i<3;i++)
//       {
//         getline(file,line);
//         for(int j=0;j<4;j++)
//         {
//           terrorist[i][j] = line[j];
//           break;
//         }
//         file << endl;
//       }
      

//    file.close();
// }

// void storeShooterInFile()
// {
//    fstream file;
//    file.open("Shooter.txt", ios::out);
//    for(int i=0;i<3;i++)
//    {
//      for(int j=0;j<4;j++)
//       {
//          file << shooter[i][j];
//       }
//       file << endl;
//    }
   
// }

// void readShooterFromFile()
// {
//    fstream file;
//    string line;
//    file.open("Shooter.txt", ios::in);

//       for(int i=0;i<3;i++)
//       {
//         getline(file,line);
//         for(int j=0;j<4;j++)
//         {
//           shooter[i][j] = line[j];
//           break;
//         }
//         file << endl;
//       }
      

//    file.close();
// }

// void storeFieldInFile()
// {
//    fstream file;
//    file.open("Field.txt", ios::out);
//    for(int i=0;i<39;i++)
//    {
//      for(int j=0;j<143;j++)
//       {
//          file << field[i][j];
//       }
//       file << endl;
//    }
   
// }

// void readFieldFromFile()
// {
//    fstream file;
//    string line;
//    file.open("Field.txt", ios::in);

//       for(int i=0;i<39;i++)
//       {
//         getline(file,line);
//         for(int j=0;j<143;j++)
//         {
//           field[i][j] = line[j];
//         }
//         file << endl;
//       }
      

//    file.close();

// }

